type Query {
    getUser: getUserResponse
    allUser: [User]
    allMarket: [Market]
    allProduct: [Product]
    marketproducts(marketID: Int) : [Product]
    getmarketID(market_name: String) : [Market]
}
type getUserResponse{
    ok: Boolean
    error: String
    user: User
}
type Mutation {
    addUser(
        user_name: String,
        password: String,
        email: String,
        gender: genderselect,
        tel_user: String,
        lat_user: Float,
        long_user: Float,
        address: String,
        tel_certify: Boolean,
        balance: Int,
        account: Int
    ): addUserResponse,
    SignIn(user_name: String, password: String): getUserResponse,
    deleteUser(
        user_name: String,
        password: String
    ): addUserResponse,
    updateUser(
            user_name: String,
            password: String,
            email: String,
            tel_user: String,
            account: Int
            ): [User!]!,
    addMarket(
        market_name: String,
        address: String,
        tel_market: String,
        deli_market: deliverselect,
    ): Market,
    addProduct(
        product_name: String,
        product_quantity: Int,
        product_price: Int,
        product_category: String,
        product_description: String,
        product_img:JSONB,
        product_onlyWoman:iswoman,
        marketID: Int
    ): Product,
    productsOFmarket(
        market_name: String
    ):Product
}